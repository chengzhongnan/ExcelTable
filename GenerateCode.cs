using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExcelTable
{
    /// <summary>
    /// 負責將 TableSchema 集合轉換為 C# 原始程式碼檔案。
    /// </summary>
    public static class CodeGenerator
    {
        private const string DeserializerFactoryCode = """
    // 以下代码是正确初始化DataManager的代码，请将其加入到你的项目中。
    // 使用方法：
    // var configType = typeof(ExcelTable.Configs.DataManager);
    // var deserializers = DeserializerFactory.CreateJsonDeserializersForAllTables(configType.Assembly, configType.Namespace);
    // 以下方式采用嵌入到DLL中的JSON加载，不需要配置路径
    // ExcelTable.Configs.DataManager.LoadAllFromEmbedded(configType.Assembly, deserializers);
    // 以下方式采用外部配置文件加载，需要指定配置文件路径和文件扩展名，
    // 支持JSON，XML，CSV等配置文件的加载，但是需要自己实现序列化
    // ExcelTable.Configs.DataManager.LoadAllFromDirectory(@"..\output\Json", deserializers);

    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Reflection;
    using Newtonsoft.Json;

    public static class DeserializerFactory
    {
        public static Dictionary<Type, Func<Stream, IEnumerable<object>>> CreateJsonDeserializersForAllTables(Assembly configAssembly, string targetNamespace)
        {
            var deserializers = new Dictionary<Type, Func<Stream, IEnumerable<object>>>();

            var configTypes = configAssembly.GetTypes().Where(t => 
                t.IsClass && 
                t.IsPublic && 
                t.Namespace == targetNamespace && 
                t.Name != "DataManager"
            );

            foreach (var configType in configTypes)
            {
                deserializers[configType] = (stream) =>
                {
                    using var reader = new StreamReader(stream);
                    string json = reader.ReadToEnd();
                    Type listType = typeof(List<>).MakeGenericType(configType);
                    return (IEnumerable<object>)JsonConvert.DeserializeObject(json, listType);
                };
            }
            return deserializers;
        }
    }

    """;

        /// <summary>
        /// 生成所有 C# 原始程式碼檔案。
        /// </summary>
        /// <param name="allSchemas">從 Excel 解析出的所有表格結構。</param>
        /// <param name="namespaceName">要用於所有生成類別的命名空間。</param>
        /// <returns>一個字典，Key 是檔案名稱 (e.g., "Boss.g.cs")，Value 是檔案的程式碼內容。</returns>
        public static Dictionary<string, string> GenerateAllSourceFiles(IEnumerable<TableSchema> allSchemas, string namespaceName)
        {
            var sourceFiles = new Dictionary<string, string>();

            foreach (var schema in allSchemas)
            {
                sourceFiles.Add($"{schema.ClassName}.g.cs", GenerateDataClassSource(schema, namespaceName));
            }

            if (allSchemas.Any())
            {
                sourceFiles.Add("DataManager.g.cs", GenerateDataManagerSource(allSchemas, namespaceName));
            }

            return sourceFiles;
        }

        /// <summary>
        /// 生成 XML 文件註釋區塊。
        /// </summary>
        /// <param name="comment">註釋文本。</param>
        /// <param name="indentationLevel">縮排層級（空格數）。</param>
        /// <returns>格式化的 XML 註釋字串。</returns>
        private static string GenerateXmlComment(string? comment, int indentationLevel)
        {
            if (string.IsNullOrWhiteSpace(comment))
            {
                return string.Empty;
            }

            var indent = new string(' ', indentationLevel);
            var sb = new StringBuilder();
            sb.AppendLine($"{indent}/// <summary>");

            // 為了處理可能的多行註釋，按行分割並處理
            string[] lines = comment.Split(new[] { "\r\n", "\r", "\n" }, System.StringSplitOptions.None);
            foreach (var line in lines)
            {
                // 使用 SecurityElement.Escape 來轉義 XML 特殊字符，例如 <, > 和 &
                sb.AppendLine($"{indent}/// {System.Security.SecurityElement.Escape(line)}");
            }
            sb.AppendLine($"{indent}/// </summary>");
            return sb.ToString();
        }

        /// <summary>
        /// 為單個 TableSchema 生成數據類別的 C# 程式碼。
        /// </summary>
        private static string GenerateDataClassSource(TableSchema schema, string namespaceName)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine();
            sb.AppendLine($"namespace {namespaceName}");
            sb.AppendLine("{");
            sb.Append(GenerateXmlComment($"{schema.ClassName} (Generated from Excel)", 4));
            sb.AppendLine($"    public partial class {schema.ClassName}");
            sb.AppendLine("    {");

            var nestedClasses = new StringBuilder();
            foreach (var prop in schema.Properties)
            {
                if (prop.Type.Contains("Object"))
                {
                    string nestedClassName = prop.Type.Replace("List<", "").Replace(">", "");
                    nestedClasses.Append(GenerateNestedClassSource(nestedClassName, prop.Children));
                }

                sb.Append(GenerateXmlComment(prop.Comment, 8));
                sb.AppendLine($"        public {prop.Type} {prop.Name} {{ get; set; }}");
            }

            if (nestedClasses.Length > 0)
            {
                sb.AppendLine();
                sb.Append(nestedClasses.ToString());
            }

            sb.AppendLine("    }");
            sb.AppendLine("}");
            return sb.ToString();
        }

        /// <summary>
        /// 為嵌套物件生成其類別定義的 C# 程式碼。
        /// </summary>
        private static string GenerateNestedClassSource(string className, List<PropertySchema> properties)
        {
            var sb = new StringBuilder();
            sb.Append(GenerateXmlComment(properties.FirstOrDefault()?.Comment, 8));
            sb.AppendLine($"        public partial class {className}");
            sb.AppendLine("        {");
            foreach (var prop in properties)
            {
                sb.Append(GenerateXmlComment(prop.Comment, 12));
                sb.AppendLine($"            public {prop.Type} {prop.Name} {{ get; set; }}");
            }
            sb.AppendLine("        }");
            return sb.ToString();
        }

        /// <summary>
        /// 生成統一的 DataManager 靜態類別的 C# 程式碼。
        /// </summary>
        private static string GenerateDataManagerSource(IEnumerable<TableSchema> allSchemas, string namespaceName)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using System.IO;");
            sb.AppendLine("using System.Linq;");
            sb.AppendLine("using System.Reflection;");
            sb.AppendLine("using System.Text;"); // For Base64 decoding
            sb.AppendLine();
            sb.AppendLine($"namespace {namespaceName}");
            sb.AppendLine("{");
            sb.AppendLine("    /// <summary>");
            sb.AppendLine("    /// Manages loading and accessing all configuration table data.");
            sb.AppendLine("    /// </summary>");
            sb.AppendLine("    public static class DataManager");
            sb.AppendLine("    {");

            // 將輔助程式碼進行 Base64 編碼，以安全的字串形式嵌入
            var codeBytes = Encoding.UTF8.GetBytes(DeserializerFactoryCode);
            var base64Code = Convert.ToBase64String(codeBytes);

            sb.AppendLine("        /// <summary>");
            sb.AppendLine("        /// Provides helper code for creating deserializers (Base64 encoded).");
            sb.AppendLine("        /// </summary>");
            sb.AppendLine($"        private const string HelperCodeBase64 = \"{base64Code}\";");
            sb.AppendLine();

            // 為每個表格生成數據字典屬性
            foreach (var schema in allSchemas)
            {
                var primaryKey = schema.Properties.FirstOrDefault();
                if (primaryKey == null) continue;

                sb.Append(GenerateXmlComment($"Contains all data for the {schema.ClassName} table, keyed by {primaryKey.Name}.", 8));
                sb.AppendLine($"        public static IReadOnlyDictionary<{primaryKey.Type}, {schema.ClassName}> {schema.ClassName}s {{ get; private set; }}");
            }

            // 生成 LoadAllFromEmbedded 方法
            sb.AppendLine();
            sb.AppendLine("        /// <summary>");
            sb.AppendLine("        /// Loads all configuration data from the embedded resources of the specified assembly.");
            sb.AppendLine("        /// </summary>");
            sb.AppendLine("        /// <param name=\"assembly\">The assembly containing the embedded data files (usually typeof(DataManager).Assembly).</param>");
            sb.AppendLine("        /// <param name=\"deserializers\">A dictionary mapping a data type to a function that can deserialize a stream.</param>");
            sb.AppendLine("        public static void LoadAllFromEmbedded(Assembly assembly, Dictionary<Type, Func<Stream, IEnumerable<object>>> deserializers)");
            sb.AppendLine("        {");
            sb.AppendLine("            if (deserializers == null) { throw new Exception(GetDeserializerHelpMessage()); }");
            sb.AppendLine();
            foreach (var schema in allSchemas)
            {
                var primaryKey = schema.Properties.FirstOrDefault();
                if (primaryKey == null) continue;
                sb.AppendLine($"            LoadTableFromEmbedded<{primaryKey.Type}, {schema.ClassName}>(assembly, deserializers, data => {schema.ClassName}s = data, item => item.{primaryKey.Name});");
            }
            sb.AppendLine("        }");

            // 生成 LoadAllFromDirectory 方法
            sb.AppendLine();
            sb.AppendLine("        /// <summary>");
            sb.AppendLine("        /// Loads all configuration data from an external directory.");
            sb.AppendLine("        /// </summary>");
            sb.AppendLine("        /// <param name=\"directoryPath\">The full path to the directory containing the data files.</param>");
            sb.AppendLine("        /// <param name=\"deserializers\">A dictionary mapping a data type to a function that can deserialize a stream.</param>");
            sb.AppendLine("        /// <param name=\"fileExtension\">The file extension to look for, including the dot (e.g., \".json\").</param>");
            sb.AppendLine("        public static void LoadAllFromDirectory(string directoryPath, Dictionary<Type, Func<Stream, IEnumerable<object>>> deserializers, string fileExtension = \".json\")");
            sb.AppendLine("        {");
            sb.AppendLine("            if (deserializers == null) { throw new Exception(GetDeserializerHelpMessage()); }");
            sb.AppendLine();
            foreach (var schema in allSchemas)
            {
                var primaryKey = schema.Properties.FirstOrDefault();
                if (primaryKey == null) continue;
                sb.AppendLine($"            LoadTableFromDirectory<{primaryKey.Type}, {schema.ClassName}>(directoryPath, fileExtension, deserializers, data => {schema.ClassName}s = data, item => item.{primaryKey.Name});");
            }
            sb.AppendLine("        }");

            // 為每個表格生成 GetById 的輔助方法
            foreach (var schema in allSchemas)
            {
                var primaryKey = schema.Properties.FirstOrDefault();
                if (primaryKey == null) continue;

                sb.AppendLine();
                sb.Append(GenerateXmlComment($"Gets a single {schema.ClassName} entry by its primary key.", 8));
                sb.AppendLine($"        public static {schema.ClassName} Get{schema.ClassName}ById({primaryKey.Type} id)");
                sb.AppendLine("        {");
                sb.AppendLine($"            return {schema.ClassName}s.TryGetValue(id, out var value) ? value : default;");
                sb.AppendLine("        }");
            }

            // 生成私有的泛型加載輔助方法
            sb.AppendLine();
            sb.AppendLine("        private static void LoadTableFromEmbedded<TKey, TValue>(Assembly assembly, Dictionary<Type, Func<Stream, IEnumerable<object>>> deserializers, Action<IReadOnlyDictionary<TKey, TValue>> assigner, Func<TValue, TKey> keySelector) where TValue : class");
            sb.AppendLine("        {");
            sb.AppendLine("            if (!deserializers.TryGetValue(typeof(TValue), out var deserializer)) return;");
            sb.AppendLine("            string resourceName = assembly.GetManifestResourceNames().SingleOrDefault(str => str.EndsWith($\"{typeof(TValue).Name}.json\"));");
            sb.AppendLine("            if (resourceName == null) return;");
            sb.AppendLine("            using (Stream stream = assembly.GetManifestResourceStream(resourceName))");
            sb.AppendLine("            {");
            sb.AppendLine("                if(stream == null) return;");
            sb.AppendLine("                var items = deserializer(stream).Cast<TValue>();");
            sb.AppendLine("                assigner(items.Where(item => keySelector(item) != null).ToDictionary(keySelector));");
            sb.AppendLine("            }");
            sb.AppendLine("        }");

            sb.AppendLine();
            sb.AppendLine("        private static void LoadTableFromDirectory<TKey, TValue>(string directoryPath, string fileExtension, Dictionary<Type, Func<Stream, IEnumerable<object>>> deserializers, Action<IReadOnlyDictionary<TKey, TValue>> assigner, Func<TValue, TKey> keySelector) where TValue : class");
            sb.AppendLine("        {");
            sb.AppendLine("            if (!deserializers.TryGetValue(typeof(TValue), out var deserializer)) return;");
            sb.AppendLine("            string filePath = Path.Combine(directoryPath, typeof(TValue).Name + fileExtension);");
            sb.AppendLine("            if (!File.Exists(filePath)) return;");
            sb.AppendLine("            using (Stream stream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read))");
            sb.AppendLine("            {");
            sb.AppendLine("                var items = deserializer(stream).Cast<TValue>();");
            sb.AppendLine("                assigner(items.Where(item => keySelector(item) != null).ToDictionary(keySelector));");
            sb.AppendLine("            }");
            sb.AppendLine("        }");

            // 生成用於解碼異常訊息的輔助方法
            sb.AppendLine();
            sb.AppendLine("        private static string GetDeserializerHelpMessage()");
            sb.AppendLine("        {");
            sb.AppendLine("            byte[] helperCodeBytes = Convert.FromBase64String(HelperCodeBase64);");
            sb.AppendLine("            string decodedHelperCode = Encoding.UTF8.GetString(helperCodeBytes);");
            sb.AppendLine("            return \"The deserializers dictionary cannot be null. Please provide a dictionary of parsers. \" +");
            sb.AppendLine("                   \"You can generate one automatically using the following helper class:\\n\\n\" + decodedHelperCode;");
            sb.AppendLine("        }");

            sb.AppendLine("    }");
            sb.AppendLine("}");
            return sb.ToString();
        }
    }
}
